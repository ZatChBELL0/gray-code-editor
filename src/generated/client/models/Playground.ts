
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Playground` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Playground
 * 
 */
export type PlaygroundModel = runtime.Types.Result.DefaultSelection<Prisma.$PlaygroundPayload>

export type AggregatePlayground = {
  _count: PlaygroundCountAggregateOutputType | null
  _min: PlaygroundMinAggregateOutputType | null
  _max: PlaygroundMaxAggregateOutputType | null
}

export type PlaygroundMinAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  templates: $Enums.Templates | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
}

export type PlaygroundMaxAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  templates: $Enums.Templates | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
}

export type PlaygroundCountAggregateOutputType = {
  id: number
  title: number
  description: number
  templates: number
  createdAt: number
  updatedAt: number
  userId: number
  _all: number
}


export type PlaygroundMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  templates?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
}

export type PlaygroundMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  templates?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
}

export type PlaygroundCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  templates?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  _all?: true
}

export type PlaygroundAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Playground to aggregate.
   */
  where?: Prisma.PlaygroundWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Playgrounds to fetch.
   */
  orderBy?: Prisma.PlaygroundOrderByWithRelationInput | Prisma.PlaygroundOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PlaygroundWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Playgrounds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Playgrounds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Playgrounds
  **/
  _count?: true | PlaygroundCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PlaygroundMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PlaygroundMaxAggregateInputType
}

export type GetPlaygroundAggregateType<T extends PlaygroundAggregateArgs> = {
      [P in keyof T & keyof AggregatePlayground]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePlayground[P]>
    : Prisma.GetScalarType<T[P], AggregatePlayground[P]>
}




export type PlaygroundGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlaygroundWhereInput
  orderBy?: Prisma.PlaygroundOrderByWithAggregationInput | Prisma.PlaygroundOrderByWithAggregationInput[]
  by: Prisma.PlaygroundScalarFieldEnum[] | Prisma.PlaygroundScalarFieldEnum
  having?: Prisma.PlaygroundScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PlaygroundCountAggregateInputType | true
  _min?: PlaygroundMinAggregateInputType
  _max?: PlaygroundMaxAggregateInputType
}

export type PlaygroundGroupByOutputType = {
  id: string
  title: string
  description: string | null
  templates: $Enums.Templates
  createdAt: Date
  updatedAt: Date
  userId: string
  _count: PlaygroundCountAggregateOutputType | null
  _min: PlaygroundMinAggregateOutputType | null
  _max: PlaygroundMaxAggregateOutputType | null
}

type GetPlaygroundGroupByPayload<T extends PlaygroundGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PlaygroundGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PlaygroundGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PlaygroundGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PlaygroundGroupByOutputType[P]>
      }
    >
  >



export type PlaygroundWhereInput = {
  AND?: Prisma.PlaygroundWhereInput | Prisma.PlaygroundWhereInput[]
  OR?: Prisma.PlaygroundWhereInput[]
  NOT?: Prisma.PlaygroundWhereInput | Prisma.PlaygroundWhereInput[]
  id?: Prisma.StringFilter<"Playground"> | string
  title?: Prisma.StringFilter<"Playground"> | string
  description?: Prisma.StringNullableFilter<"Playground"> | string | null
  templates?: Prisma.EnumTemplatesFilter<"Playground"> | $Enums.Templates
  createdAt?: Prisma.DateTimeFilter<"Playground"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Playground"> | Date | string
  userId?: Prisma.StringFilter<"Playground"> | string
  Starmark?: Prisma.StarMarkListRelationFilter
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type PlaygroundOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  templates?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  Starmark?: Prisma.StarMarkOrderByRelationAggregateInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type PlaygroundWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PlaygroundWhereInput | Prisma.PlaygroundWhereInput[]
  OR?: Prisma.PlaygroundWhereInput[]
  NOT?: Prisma.PlaygroundWhereInput | Prisma.PlaygroundWhereInput[]
  title?: Prisma.StringFilter<"Playground"> | string
  description?: Prisma.StringNullableFilter<"Playground"> | string | null
  templates?: Prisma.EnumTemplatesFilter<"Playground"> | $Enums.Templates
  createdAt?: Prisma.DateTimeFilter<"Playground"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Playground"> | Date | string
  userId?: Prisma.StringFilter<"Playground"> | string
  Starmark?: Prisma.StarMarkListRelationFilter
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type PlaygroundOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  templates?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.PlaygroundCountOrderByAggregateInput
  _max?: Prisma.PlaygroundMaxOrderByAggregateInput
  _min?: Prisma.PlaygroundMinOrderByAggregateInput
}

export type PlaygroundScalarWhereWithAggregatesInput = {
  AND?: Prisma.PlaygroundScalarWhereWithAggregatesInput | Prisma.PlaygroundScalarWhereWithAggregatesInput[]
  OR?: Prisma.PlaygroundScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PlaygroundScalarWhereWithAggregatesInput | Prisma.PlaygroundScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Playground"> | string
  title?: Prisma.StringWithAggregatesFilter<"Playground"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Playground"> | string | null
  templates?: Prisma.EnumTemplatesWithAggregatesFilter<"Playground"> | $Enums.Templates
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Playground"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Playground"> | Date | string
  userId?: Prisma.StringWithAggregatesFilter<"Playground"> | string
}

export type PlaygroundCreateInput = {
  id?: string
  title: string
  description?: string | null
  templates?: $Enums.Templates
  createdAt?: Date | string
  updatedAt?: Date | string
  Starmark?: Prisma.StarMarkCreateNestedManyWithoutPlaygroundInput
  user: Prisma.UserCreateNestedOneWithoutMyPlaygroundInput
}

export type PlaygroundUncheckedCreateInput = {
  id?: string
  title: string
  description?: string | null
  templates?: $Enums.Templates
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  Starmark?: Prisma.StarMarkUncheckedCreateNestedManyWithoutPlaygroundInput
}

export type PlaygroundUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  templates?: Prisma.EnumTemplatesFieldUpdateOperationsInput | $Enums.Templates
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Starmark?: Prisma.StarMarkUpdateManyWithoutPlaygroundNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutMyPlaygroundNestedInput
}

export type PlaygroundUncheckedUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  templates?: Prisma.EnumTemplatesFieldUpdateOperationsInput | $Enums.Templates
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  Starmark?: Prisma.StarMarkUncheckedUpdateManyWithoutPlaygroundNestedInput
}

export type PlaygroundCreateManyInput = {
  id?: string
  title: string
  description?: string | null
  templates?: $Enums.Templates
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
}

export type PlaygroundUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  templates?: Prisma.EnumTemplatesFieldUpdateOperationsInput | $Enums.Templates
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlaygroundUncheckedUpdateManyInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  templates?: Prisma.EnumTemplatesFieldUpdateOperationsInput | $Enums.Templates
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PlaygroundListRelationFilter = {
  every?: Prisma.PlaygroundWhereInput
  some?: Prisma.PlaygroundWhereInput
  none?: Prisma.PlaygroundWhereInput
}

export type PlaygroundOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PlaygroundCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  templates?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type PlaygroundMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  templates?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type PlaygroundMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  templates?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type PlaygroundScalarRelationFilter = {
  is?: Prisma.PlaygroundWhereInput
  isNot?: Prisma.PlaygroundWhereInput
}

export type PlaygroundCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PlaygroundCreateWithoutUserInput, Prisma.PlaygroundUncheckedCreateWithoutUserInput> | Prisma.PlaygroundCreateWithoutUserInput[] | Prisma.PlaygroundUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PlaygroundCreateOrConnectWithoutUserInput | Prisma.PlaygroundCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PlaygroundCreateManyUserInputEnvelope
  connect?: Prisma.PlaygroundWhereUniqueInput | Prisma.PlaygroundWhereUniqueInput[]
}

export type PlaygroundUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PlaygroundCreateWithoutUserInput, Prisma.PlaygroundUncheckedCreateWithoutUserInput> | Prisma.PlaygroundCreateWithoutUserInput[] | Prisma.PlaygroundUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PlaygroundCreateOrConnectWithoutUserInput | Prisma.PlaygroundCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PlaygroundCreateManyUserInputEnvelope
  connect?: Prisma.PlaygroundWhereUniqueInput | Prisma.PlaygroundWhereUniqueInput[]
}

export type PlaygroundUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PlaygroundCreateWithoutUserInput, Prisma.PlaygroundUncheckedCreateWithoutUserInput> | Prisma.PlaygroundCreateWithoutUserInput[] | Prisma.PlaygroundUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PlaygroundCreateOrConnectWithoutUserInput | Prisma.PlaygroundCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PlaygroundUpsertWithWhereUniqueWithoutUserInput | Prisma.PlaygroundUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PlaygroundCreateManyUserInputEnvelope
  set?: Prisma.PlaygroundWhereUniqueInput | Prisma.PlaygroundWhereUniqueInput[]
  disconnect?: Prisma.PlaygroundWhereUniqueInput | Prisma.PlaygroundWhereUniqueInput[]
  delete?: Prisma.PlaygroundWhereUniqueInput | Prisma.PlaygroundWhereUniqueInput[]
  connect?: Prisma.PlaygroundWhereUniqueInput | Prisma.PlaygroundWhereUniqueInput[]
  update?: Prisma.PlaygroundUpdateWithWhereUniqueWithoutUserInput | Prisma.PlaygroundUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PlaygroundUpdateManyWithWhereWithoutUserInput | Prisma.PlaygroundUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PlaygroundScalarWhereInput | Prisma.PlaygroundScalarWhereInput[]
}

export type PlaygroundUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PlaygroundCreateWithoutUserInput, Prisma.PlaygroundUncheckedCreateWithoutUserInput> | Prisma.PlaygroundCreateWithoutUserInput[] | Prisma.PlaygroundUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PlaygroundCreateOrConnectWithoutUserInput | Prisma.PlaygroundCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PlaygroundUpsertWithWhereUniqueWithoutUserInput | Prisma.PlaygroundUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PlaygroundCreateManyUserInputEnvelope
  set?: Prisma.PlaygroundWhereUniqueInput | Prisma.PlaygroundWhereUniqueInput[]
  disconnect?: Prisma.PlaygroundWhereUniqueInput | Prisma.PlaygroundWhereUniqueInput[]
  delete?: Prisma.PlaygroundWhereUniqueInput | Prisma.PlaygroundWhereUniqueInput[]
  connect?: Prisma.PlaygroundWhereUniqueInput | Prisma.PlaygroundWhereUniqueInput[]
  update?: Prisma.PlaygroundUpdateWithWhereUniqueWithoutUserInput | Prisma.PlaygroundUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PlaygroundUpdateManyWithWhereWithoutUserInput | Prisma.PlaygroundUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PlaygroundScalarWhereInput | Prisma.PlaygroundScalarWhereInput[]
}

export type EnumTemplatesFieldUpdateOperationsInput = {
  set?: $Enums.Templates
}

export type PlaygroundCreateNestedOneWithoutStarmarkInput = {
  create?: Prisma.XOR<Prisma.PlaygroundCreateWithoutStarmarkInput, Prisma.PlaygroundUncheckedCreateWithoutStarmarkInput>
  connectOrCreate?: Prisma.PlaygroundCreateOrConnectWithoutStarmarkInput
  connect?: Prisma.PlaygroundWhereUniqueInput
}

export type PlaygroundUpdateOneRequiredWithoutStarmarkNestedInput = {
  create?: Prisma.XOR<Prisma.PlaygroundCreateWithoutStarmarkInput, Prisma.PlaygroundUncheckedCreateWithoutStarmarkInput>
  connectOrCreate?: Prisma.PlaygroundCreateOrConnectWithoutStarmarkInput
  upsert?: Prisma.PlaygroundUpsertWithoutStarmarkInput
  connect?: Prisma.PlaygroundWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PlaygroundUpdateToOneWithWhereWithoutStarmarkInput, Prisma.PlaygroundUpdateWithoutStarmarkInput>, Prisma.PlaygroundUncheckedUpdateWithoutStarmarkInput>
}

export type PlaygroundCreateWithoutUserInput = {
  id?: string
  title: string
  description?: string | null
  templates?: $Enums.Templates
  createdAt?: Date | string
  updatedAt?: Date | string
  Starmark?: Prisma.StarMarkCreateNestedManyWithoutPlaygroundInput
}

export type PlaygroundUncheckedCreateWithoutUserInput = {
  id?: string
  title: string
  description?: string | null
  templates?: $Enums.Templates
  createdAt?: Date | string
  updatedAt?: Date | string
  Starmark?: Prisma.StarMarkUncheckedCreateNestedManyWithoutPlaygroundInput
}

export type PlaygroundCreateOrConnectWithoutUserInput = {
  where: Prisma.PlaygroundWhereUniqueInput
  create: Prisma.XOR<Prisma.PlaygroundCreateWithoutUserInput, Prisma.PlaygroundUncheckedCreateWithoutUserInput>
}

export type PlaygroundCreateManyUserInputEnvelope = {
  data: Prisma.PlaygroundCreateManyUserInput | Prisma.PlaygroundCreateManyUserInput[]
}

export type PlaygroundUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.PlaygroundWhereUniqueInput
  update: Prisma.XOR<Prisma.PlaygroundUpdateWithoutUserInput, Prisma.PlaygroundUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.PlaygroundCreateWithoutUserInput, Prisma.PlaygroundUncheckedCreateWithoutUserInput>
}

export type PlaygroundUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.PlaygroundWhereUniqueInput
  data: Prisma.XOR<Prisma.PlaygroundUpdateWithoutUserInput, Prisma.PlaygroundUncheckedUpdateWithoutUserInput>
}

export type PlaygroundUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.PlaygroundScalarWhereInput
  data: Prisma.XOR<Prisma.PlaygroundUpdateManyMutationInput, Prisma.PlaygroundUncheckedUpdateManyWithoutUserInput>
}

export type PlaygroundScalarWhereInput = {
  AND?: Prisma.PlaygroundScalarWhereInput | Prisma.PlaygroundScalarWhereInput[]
  OR?: Prisma.PlaygroundScalarWhereInput[]
  NOT?: Prisma.PlaygroundScalarWhereInput | Prisma.PlaygroundScalarWhereInput[]
  id?: Prisma.StringFilter<"Playground"> | string
  title?: Prisma.StringFilter<"Playground"> | string
  description?: Prisma.StringNullableFilter<"Playground"> | string | null
  templates?: Prisma.EnumTemplatesFilter<"Playground"> | $Enums.Templates
  createdAt?: Prisma.DateTimeFilter<"Playground"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Playground"> | Date | string
  userId?: Prisma.StringFilter<"Playground"> | string
}

export type PlaygroundCreateWithoutStarmarkInput = {
  id?: string
  title: string
  description?: string | null
  templates?: $Enums.Templates
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutMyPlaygroundInput
}

export type PlaygroundUncheckedCreateWithoutStarmarkInput = {
  id?: string
  title: string
  description?: string | null
  templates?: $Enums.Templates
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
}

export type PlaygroundCreateOrConnectWithoutStarmarkInput = {
  where: Prisma.PlaygroundWhereUniqueInput
  create: Prisma.XOR<Prisma.PlaygroundCreateWithoutStarmarkInput, Prisma.PlaygroundUncheckedCreateWithoutStarmarkInput>
}

export type PlaygroundUpsertWithoutStarmarkInput = {
  update: Prisma.XOR<Prisma.PlaygroundUpdateWithoutStarmarkInput, Prisma.PlaygroundUncheckedUpdateWithoutStarmarkInput>
  create: Prisma.XOR<Prisma.PlaygroundCreateWithoutStarmarkInput, Prisma.PlaygroundUncheckedCreateWithoutStarmarkInput>
  where?: Prisma.PlaygroundWhereInput
}

export type PlaygroundUpdateToOneWithWhereWithoutStarmarkInput = {
  where?: Prisma.PlaygroundWhereInput
  data: Prisma.XOR<Prisma.PlaygroundUpdateWithoutStarmarkInput, Prisma.PlaygroundUncheckedUpdateWithoutStarmarkInput>
}

export type PlaygroundUpdateWithoutStarmarkInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  templates?: Prisma.EnumTemplatesFieldUpdateOperationsInput | $Enums.Templates
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutMyPlaygroundNestedInput
}

export type PlaygroundUncheckedUpdateWithoutStarmarkInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  templates?: Prisma.EnumTemplatesFieldUpdateOperationsInput | $Enums.Templates
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PlaygroundCreateManyUserInput = {
  id?: string
  title: string
  description?: string | null
  templates?: $Enums.Templates
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PlaygroundUpdateWithoutUserInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  templates?: Prisma.EnumTemplatesFieldUpdateOperationsInput | $Enums.Templates
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Starmark?: Prisma.StarMarkUpdateManyWithoutPlaygroundNestedInput
}

export type PlaygroundUncheckedUpdateWithoutUserInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  templates?: Prisma.EnumTemplatesFieldUpdateOperationsInput | $Enums.Templates
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Starmark?: Prisma.StarMarkUncheckedUpdateManyWithoutPlaygroundNestedInput
}

export type PlaygroundUncheckedUpdateManyWithoutUserInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  templates?: Prisma.EnumTemplatesFieldUpdateOperationsInput | $Enums.Templates
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PlaygroundCountOutputType
 */

export type PlaygroundCountOutputType = {
  Starmark: number
}

export type PlaygroundCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Starmark?: boolean | PlaygroundCountOutputTypeCountStarmarkArgs
}

/**
 * PlaygroundCountOutputType without action
 */
export type PlaygroundCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundCountOutputType
   */
  select?: Prisma.PlaygroundCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PlaygroundCountOutputType without action
 */
export type PlaygroundCountOutputTypeCountStarmarkArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StarMarkWhereInput
}


export type PlaygroundSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  templates?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  Starmark?: boolean | Prisma.Playground$StarmarkArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.PlaygroundCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playground"]>



export type PlaygroundSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  templates?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
}

export type PlaygroundOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "templates" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["playground"]>
export type PlaygroundInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Starmark?: boolean | Prisma.Playground$StarmarkArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.PlaygroundCountOutputTypeDefaultArgs<ExtArgs>
}

export type $PlaygroundPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Playground"
  objects: {
    Starmark: Prisma.$StarMarkPayload<ExtArgs>[]
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    description: string | null
    templates: $Enums.Templates
    createdAt: Date
    updatedAt: Date
    userId: string
  }, ExtArgs["result"]["playground"]>
  composites: {}
}

export type PlaygroundGetPayload<S extends boolean | null | undefined | PlaygroundDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PlaygroundPayload, S>

export type PlaygroundCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PlaygroundFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PlaygroundCountAggregateInputType | true
  }

export interface PlaygroundDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Playground'], meta: { name: 'Playground' } }
  /**
   * Find zero or one Playground that matches the filter.
   * @param {PlaygroundFindUniqueArgs} args - Arguments to find a Playground
   * @example
   * // Get one Playground
   * const playground = await prisma.playground.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PlaygroundFindUniqueArgs>(args: Prisma.SelectSubset<T, PlaygroundFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PlaygroundClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Playground that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PlaygroundFindUniqueOrThrowArgs} args - Arguments to find a Playground
   * @example
   * // Get one Playground
   * const playground = await prisma.playground.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PlaygroundFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PlaygroundFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlaygroundClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Playground that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundFindFirstArgs} args - Arguments to find a Playground
   * @example
   * // Get one Playground
   * const playground = await prisma.playground.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PlaygroundFindFirstArgs>(args?: Prisma.SelectSubset<T, PlaygroundFindFirstArgs<ExtArgs>>): Prisma.Prisma__PlaygroundClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Playground that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundFindFirstOrThrowArgs} args - Arguments to find a Playground
   * @example
   * // Get one Playground
   * const playground = await prisma.playground.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PlaygroundFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PlaygroundFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlaygroundClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Playgrounds that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Playgrounds
   * const playgrounds = await prisma.playground.findMany()
   * 
   * // Get first 10 Playgrounds
   * const playgrounds = await prisma.playground.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const playgroundWithIdOnly = await prisma.playground.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PlaygroundFindManyArgs>(args?: Prisma.SelectSubset<T, PlaygroundFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlaygroundPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Playground.
   * @param {PlaygroundCreateArgs} args - Arguments to create a Playground.
   * @example
   * // Create one Playground
   * const Playground = await prisma.playground.create({
   *   data: {
   *     // ... data to create a Playground
   *   }
   * })
   * 
   */
  create<T extends PlaygroundCreateArgs>(args: Prisma.SelectSubset<T, PlaygroundCreateArgs<ExtArgs>>): Prisma.Prisma__PlaygroundClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Playgrounds.
   * @param {PlaygroundCreateManyArgs} args - Arguments to create many Playgrounds.
   * @example
   * // Create many Playgrounds
   * const playground = await prisma.playground.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PlaygroundCreateManyArgs>(args?: Prisma.SelectSubset<T, PlaygroundCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Playground.
   * @param {PlaygroundDeleteArgs} args - Arguments to delete one Playground.
   * @example
   * // Delete one Playground
   * const Playground = await prisma.playground.delete({
   *   where: {
   *     // ... filter to delete one Playground
   *   }
   * })
   * 
   */
  delete<T extends PlaygroundDeleteArgs>(args: Prisma.SelectSubset<T, PlaygroundDeleteArgs<ExtArgs>>): Prisma.Prisma__PlaygroundClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Playground.
   * @param {PlaygroundUpdateArgs} args - Arguments to update one Playground.
   * @example
   * // Update one Playground
   * const playground = await prisma.playground.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PlaygroundUpdateArgs>(args: Prisma.SelectSubset<T, PlaygroundUpdateArgs<ExtArgs>>): Prisma.Prisma__PlaygroundClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Playgrounds.
   * @param {PlaygroundDeleteManyArgs} args - Arguments to filter Playgrounds to delete.
   * @example
   * // Delete a few Playgrounds
   * const { count } = await prisma.playground.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PlaygroundDeleteManyArgs>(args?: Prisma.SelectSubset<T, PlaygroundDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Playgrounds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Playgrounds
   * const playground = await prisma.playground.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PlaygroundUpdateManyArgs>(args: Prisma.SelectSubset<T, PlaygroundUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Playground.
   * @param {PlaygroundUpsertArgs} args - Arguments to update or create a Playground.
   * @example
   * // Update or create a Playground
   * const playground = await prisma.playground.upsert({
   *   create: {
   *     // ... data to create a Playground
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Playground we want to update
   *   }
   * })
   */
  upsert<T extends PlaygroundUpsertArgs>(args: Prisma.SelectSubset<T, PlaygroundUpsertArgs<ExtArgs>>): Prisma.Prisma__PlaygroundClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Playgrounds that matches the filter.
   * @param {PlaygroundFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const playground = await prisma.playground.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.PlaygroundFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a Playground.
   * @param {PlaygroundAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const playground = await prisma.playground.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.PlaygroundAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of Playgrounds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundCountArgs} args - Arguments to filter Playgrounds to count.
   * @example
   * // Count the number of Playgrounds
   * const count = await prisma.playground.count({
   *   where: {
   *     // ... the filter for the Playgrounds we want to count
   *   }
   * })
  **/
  count<T extends PlaygroundCountArgs>(
    args?: Prisma.Subset<T, PlaygroundCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PlaygroundCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Playground.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PlaygroundAggregateArgs>(args: Prisma.Subset<T, PlaygroundAggregateArgs>): Prisma.PrismaPromise<GetPlaygroundAggregateType<T>>

  /**
   * Group by Playground.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PlaygroundGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PlaygroundGroupByArgs['orderBy'] }
      : { orderBy?: PlaygroundGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PlaygroundGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaygroundGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Playground model
 */
readonly fields: PlaygroundFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Playground.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PlaygroundClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Starmark<T extends Prisma.Playground$StarmarkArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Playground$StarmarkArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StarMarkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Playground model
 */
export interface PlaygroundFieldRefs {
  readonly id: Prisma.FieldRef<"Playground", 'String'>
  readonly title: Prisma.FieldRef<"Playground", 'String'>
  readonly description: Prisma.FieldRef<"Playground", 'String'>
  readonly templates: Prisma.FieldRef<"Playground", 'Templates'>
  readonly createdAt: Prisma.FieldRef<"Playground", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Playground", 'DateTime'>
  readonly userId: Prisma.FieldRef<"Playground", 'String'>
}
    

// Custom InputTypes
/**
 * Playground findUnique
 */
export type PlaygroundFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playground
   */
  select?: Prisma.PlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playground
   */
  omit?: Prisma.PlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundInclude<ExtArgs> | null
  /**
   * Filter, which Playground to fetch.
   */
  where: Prisma.PlaygroundWhereUniqueInput
}

/**
 * Playground findUniqueOrThrow
 */
export type PlaygroundFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playground
   */
  select?: Prisma.PlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playground
   */
  omit?: Prisma.PlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundInclude<ExtArgs> | null
  /**
   * Filter, which Playground to fetch.
   */
  where: Prisma.PlaygroundWhereUniqueInput
}

/**
 * Playground findFirst
 */
export type PlaygroundFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playground
   */
  select?: Prisma.PlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playground
   */
  omit?: Prisma.PlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundInclude<ExtArgs> | null
  /**
   * Filter, which Playground to fetch.
   */
  where?: Prisma.PlaygroundWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Playgrounds to fetch.
   */
  orderBy?: Prisma.PlaygroundOrderByWithRelationInput | Prisma.PlaygroundOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Playgrounds.
   */
  cursor?: Prisma.PlaygroundWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Playgrounds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Playgrounds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Playgrounds.
   */
  distinct?: Prisma.PlaygroundScalarFieldEnum | Prisma.PlaygroundScalarFieldEnum[]
}

/**
 * Playground findFirstOrThrow
 */
export type PlaygroundFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playground
   */
  select?: Prisma.PlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playground
   */
  omit?: Prisma.PlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundInclude<ExtArgs> | null
  /**
   * Filter, which Playground to fetch.
   */
  where?: Prisma.PlaygroundWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Playgrounds to fetch.
   */
  orderBy?: Prisma.PlaygroundOrderByWithRelationInput | Prisma.PlaygroundOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Playgrounds.
   */
  cursor?: Prisma.PlaygroundWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Playgrounds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Playgrounds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Playgrounds.
   */
  distinct?: Prisma.PlaygroundScalarFieldEnum | Prisma.PlaygroundScalarFieldEnum[]
}

/**
 * Playground findMany
 */
export type PlaygroundFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playground
   */
  select?: Prisma.PlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playground
   */
  omit?: Prisma.PlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundInclude<ExtArgs> | null
  /**
   * Filter, which Playgrounds to fetch.
   */
  where?: Prisma.PlaygroundWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Playgrounds to fetch.
   */
  orderBy?: Prisma.PlaygroundOrderByWithRelationInput | Prisma.PlaygroundOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Playgrounds.
   */
  cursor?: Prisma.PlaygroundWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Playgrounds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Playgrounds.
   */
  skip?: number
  distinct?: Prisma.PlaygroundScalarFieldEnum | Prisma.PlaygroundScalarFieldEnum[]
}

/**
 * Playground create
 */
export type PlaygroundCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playground
   */
  select?: Prisma.PlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playground
   */
  omit?: Prisma.PlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundInclude<ExtArgs> | null
  /**
   * The data needed to create a Playground.
   */
  data: Prisma.XOR<Prisma.PlaygroundCreateInput, Prisma.PlaygroundUncheckedCreateInput>
}

/**
 * Playground createMany
 */
export type PlaygroundCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Playgrounds.
   */
  data: Prisma.PlaygroundCreateManyInput | Prisma.PlaygroundCreateManyInput[]
}

/**
 * Playground update
 */
export type PlaygroundUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playground
   */
  select?: Prisma.PlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playground
   */
  omit?: Prisma.PlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundInclude<ExtArgs> | null
  /**
   * The data needed to update a Playground.
   */
  data: Prisma.XOR<Prisma.PlaygroundUpdateInput, Prisma.PlaygroundUncheckedUpdateInput>
  /**
   * Choose, which Playground to update.
   */
  where: Prisma.PlaygroundWhereUniqueInput
}

/**
 * Playground updateMany
 */
export type PlaygroundUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Playgrounds.
   */
  data: Prisma.XOR<Prisma.PlaygroundUpdateManyMutationInput, Prisma.PlaygroundUncheckedUpdateManyInput>
  /**
   * Filter which Playgrounds to update
   */
  where?: Prisma.PlaygroundWhereInput
  /**
   * Limit how many Playgrounds to update.
   */
  limit?: number
}

/**
 * Playground upsert
 */
export type PlaygroundUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playground
   */
  select?: Prisma.PlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playground
   */
  omit?: Prisma.PlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundInclude<ExtArgs> | null
  /**
   * The filter to search for the Playground to update in case it exists.
   */
  where: Prisma.PlaygroundWhereUniqueInput
  /**
   * In case the Playground found by the `where` argument doesn't exist, create a new Playground with this data.
   */
  create: Prisma.XOR<Prisma.PlaygroundCreateInput, Prisma.PlaygroundUncheckedCreateInput>
  /**
   * In case the Playground was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PlaygroundUpdateInput, Prisma.PlaygroundUncheckedUpdateInput>
}

/**
 * Playground delete
 */
export type PlaygroundDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playground
   */
  select?: Prisma.PlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playground
   */
  omit?: Prisma.PlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundInclude<ExtArgs> | null
  /**
   * Filter which Playground to delete.
   */
  where: Prisma.PlaygroundWhereUniqueInput
}

/**
 * Playground deleteMany
 */
export type PlaygroundDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Playgrounds to delete
   */
  where?: Prisma.PlaygroundWhereInput
  /**
   * Limit how many Playgrounds to delete.
   */
  limit?: number
}

/**
 * Playground findRaw
 */
export type PlaygroundFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Playground aggregateRaw
 */
export type PlaygroundAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Playground.Starmark
 */
export type Playground$StarmarkArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StarMark
   */
  select?: Prisma.StarMarkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StarMark
   */
  omit?: Prisma.StarMarkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StarMarkInclude<ExtArgs> | null
  where?: Prisma.StarMarkWhereInput
  orderBy?: Prisma.StarMarkOrderByWithRelationInput | Prisma.StarMarkOrderByWithRelationInput[]
  cursor?: Prisma.StarMarkWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.StarMarkScalarFieldEnum | Prisma.StarMarkScalarFieldEnum[]
}

/**
 * Playground without action
 */
export type PlaygroundDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playground
   */
  select?: Prisma.PlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playground
   */
  omit?: Prisma.PlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundInclude<ExtArgs> | null
}
