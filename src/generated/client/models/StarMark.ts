
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `StarMark` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model StarMark
 * 
 */
export type StarMarkModel = runtime.Types.Result.DefaultSelection<Prisma.$StarMarkPayload>

export type AggregateStarMark = {
  _count: StarMarkCountAggregateOutputType | null
  _min: StarMarkMinAggregateOutputType | null
  _max: StarMarkMaxAggregateOutputType | null
}

export type StarMarkMinAggregateOutputType = {
  id: string | null
  userId: string | null
  playgroundId: string | null
  isMarked: string | null
  createdAt: Date | null
}

export type StarMarkMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  playgroundId: string | null
  isMarked: string | null
  createdAt: Date | null
}

export type StarMarkCountAggregateOutputType = {
  id: number
  userId: number
  playgroundId: number
  isMarked: number
  createdAt: number
  _all: number
}


export type StarMarkMinAggregateInputType = {
  id?: true
  userId?: true
  playgroundId?: true
  isMarked?: true
  createdAt?: true
}

export type StarMarkMaxAggregateInputType = {
  id?: true
  userId?: true
  playgroundId?: true
  isMarked?: true
  createdAt?: true
}

export type StarMarkCountAggregateInputType = {
  id?: true
  userId?: true
  playgroundId?: true
  isMarked?: true
  createdAt?: true
  _all?: true
}

export type StarMarkAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StarMark to aggregate.
   */
  where?: Prisma.StarMarkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StarMarks to fetch.
   */
  orderBy?: Prisma.StarMarkOrderByWithRelationInput | Prisma.StarMarkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StarMarkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StarMarks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StarMarks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned StarMarks
  **/
  _count?: true | StarMarkCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StarMarkMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StarMarkMaxAggregateInputType
}

export type GetStarMarkAggregateType<T extends StarMarkAggregateArgs> = {
      [P in keyof T & keyof AggregateStarMark]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStarMark[P]>
    : Prisma.GetScalarType<T[P], AggregateStarMark[P]>
}




export type StarMarkGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StarMarkWhereInput
  orderBy?: Prisma.StarMarkOrderByWithAggregationInput | Prisma.StarMarkOrderByWithAggregationInput[]
  by: Prisma.StarMarkScalarFieldEnum[] | Prisma.StarMarkScalarFieldEnum
  having?: Prisma.StarMarkScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StarMarkCountAggregateInputType | true
  _min?: StarMarkMinAggregateInputType
  _max?: StarMarkMaxAggregateInputType
}

export type StarMarkGroupByOutputType = {
  id: string
  userId: string
  playgroundId: string
  isMarked: string
  createdAt: Date
  _count: StarMarkCountAggregateOutputType | null
  _min: StarMarkMinAggregateOutputType | null
  _max: StarMarkMaxAggregateOutputType | null
}

type GetStarMarkGroupByPayload<T extends StarMarkGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StarMarkGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StarMarkGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StarMarkGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StarMarkGroupByOutputType[P]>
      }
    >
  >



export type StarMarkWhereInput = {
  AND?: Prisma.StarMarkWhereInput | Prisma.StarMarkWhereInput[]
  OR?: Prisma.StarMarkWhereInput[]
  NOT?: Prisma.StarMarkWhereInput | Prisma.StarMarkWhereInput[]
  id?: Prisma.StringFilter<"StarMark"> | string
  userId?: Prisma.StringFilter<"StarMark"> | string
  playgroundId?: Prisma.StringFilter<"StarMark"> | string
  isMarked?: Prisma.StringFilter<"StarMark"> | string
  createdAt?: Prisma.DateTimeFilter<"StarMark"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  playground?: Prisma.XOR<Prisma.PlaygroundScalarRelationFilter, Prisma.PlaygroundWhereInput>
}

export type StarMarkOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  playgroundId?: Prisma.SortOrder
  isMarked?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  playground?: Prisma.PlaygroundOrderByWithRelationInput
}

export type StarMarkWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId_playgroundId?: Prisma.StarMarkUserIdPlaygroundIdCompoundUniqueInput
  AND?: Prisma.StarMarkWhereInput | Prisma.StarMarkWhereInput[]
  OR?: Prisma.StarMarkWhereInput[]
  NOT?: Prisma.StarMarkWhereInput | Prisma.StarMarkWhereInput[]
  userId?: Prisma.StringFilter<"StarMark"> | string
  playgroundId?: Prisma.StringFilter<"StarMark"> | string
  isMarked?: Prisma.StringFilter<"StarMark"> | string
  createdAt?: Prisma.DateTimeFilter<"StarMark"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  playground?: Prisma.XOR<Prisma.PlaygroundScalarRelationFilter, Prisma.PlaygroundWhereInput>
}, "id" | "userId_playgroundId">

export type StarMarkOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  playgroundId?: Prisma.SortOrder
  isMarked?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.StarMarkCountOrderByAggregateInput
  _max?: Prisma.StarMarkMaxOrderByAggregateInput
  _min?: Prisma.StarMarkMinOrderByAggregateInput
}

export type StarMarkScalarWhereWithAggregatesInput = {
  AND?: Prisma.StarMarkScalarWhereWithAggregatesInput | Prisma.StarMarkScalarWhereWithAggregatesInput[]
  OR?: Prisma.StarMarkScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StarMarkScalarWhereWithAggregatesInput | Prisma.StarMarkScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"StarMark"> | string
  userId?: Prisma.StringWithAggregatesFilter<"StarMark"> | string
  playgroundId?: Prisma.StringWithAggregatesFilter<"StarMark"> | string
  isMarked?: Prisma.StringWithAggregatesFilter<"StarMark"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"StarMark"> | Date | string
}

export type StarMarkCreateInput = {
  id?: string
  isMarked: string
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutStaredPlaygroundInput
  playground: Prisma.PlaygroundCreateNestedOneWithoutStarmarkInput
}

export type StarMarkUncheckedCreateInput = {
  id?: string
  userId: string
  playgroundId: string
  isMarked: string
  createdAt?: Date | string
}

export type StarMarkUpdateInput = {
  isMarked?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutStaredPlaygroundNestedInput
  playground?: Prisma.PlaygroundUpdateOneRequiredWithoutStarmarkNestedInput
}

export type StarMarkUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  playgroundId?: Prisma.StringFieldUpdateOperationsInput | string
  isMarked?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StarMarkCreateManyInput = {
  id?: string
  userId: string
  playgroundId: string
  isMarked: string
  createdAt?: Date | string
}

export type StarMarkUpdateManyMutationInput = {
  isMarked?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StarMarkUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  playgroundId?: Prisma.StringFieldUpdateOperationsInput | string
  isMarked?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StarMarkListRelationFilter = {
  every?: Prisma.StarMarkWhereInput
  some?: Prisma.StarMarkWhereInput
  none?: Prisma.StarMarkWhereInput
}

export type StarMarkOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StarMarkUserIdPlaygroundIdCompoundUniqueInput = {
  userId: string
  playgroundId: string
}

export type StarMarkCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  playgroundId?: Prisma.SortOrder
  isMarked?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StarMarkMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  playgroundId?: Prisma.SortOrder
  isMarked?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StarMarkMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  playgroundId?: Prisma.SortOrder
  isMarked?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StarMarkCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.StarMarkCreateWithoutUserInput, Prisma.StarMarkUncheckedCreateWithoutUserInput> | Prisma.StarMarkCreateWithoutUserInput[] | Prisma.StarMarkUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.StarMarkCreateOrConnectWithoutUserInput | Prisma.StarMarkCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.StarMarkCreateManyUserInputEnvelope
  connect?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
}

export type StarMarkUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.StarMarkCreateWithoutUserInput, Prisma.StarMarkUncheckedCreateWithoutUserInput> | Prisma.StarMarkCreateWithoutUserInput[] | Prisma.StarMarkUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.StarMarkCreateOrConnectWithoutUserInput | Prisma.StarMarkCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.StarMarkCreateManyUserInputEnvelope
  connect?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
}

export type StarMarkUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.StarMarkCreateWithoutUserInput, Prisma.StarMarkUncheckedCreateWithoutUserInput> | Prisma.StarMarkCreateWithoutUserInput[] | Prisma.StarMarkUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.StarMarkCreateOrConnectWithoutUserInput | Prisma.StarMarkCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.StarMarkUpsertWithWhereUniqueWithoutUserInput | Prisma.StarMarkUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.StarMarkCreateManyUserInputEnvelope
  set?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
  disconnect?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
  delete?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
  connect?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
  update?: Prisma.StarMarkUpdateWithWhereUniqueWithoutUserInput | Prisma.StarMarkUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.StarMarkUpdateManyWithWhereWithoutUserInput | Prisma.StarMarkUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.StarMarkScalarWhereInput | Prisma.StarMarkScalarWhereInput[]
}

export type StarMarkUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.StarMarkCreateWithoutUserInput, Prisma.StarMarkUncheckedCreateWithoutUserInput> | Prisma.StarMarkCreateWithoutUserInput[] | Prisma.StarMarkUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.StarMarkCreateOrConnectWithoutUserInput | Prisma.StarMarkCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.StarMarkUpsertWithWhereUniqueWithoutUserInput | Prisma.StarMarkUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.StarMarkCreateManyUserInputEnvelope
  set?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
  disconnect?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
  delete?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
  connect?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
  update?: Prisma.StarMarkUpdateWithWhereUniqueWithoutUserInput | Prisma.StarMarkUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.StarMarkUpdateManyWithWhereWithoutUserInput | Prisma.StarMarkUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.StarMarkScalarWhereInput | Prisma.StarMarkScalarWhereInput[]
}

export type StarMarkCreateNestedManyWithoutPlaygroundInput = {
  create?: Prisma.XOR<Prisma.StarMarkCreateWithoutPlaygroundInput, Prisma.StarMarkUncheckedCreateWithoutPlaygroundInput> | Prisma.StarMarkCreateWithoutPlaygroundInput[] | Prisma.StarMarkUncheckedCreateWithoutPlaygroundInput[]
  connectOrCreate?: Prisma.StarMarkCreateOrConnectWithoutPlaygroundInput | Prisma.StarMarkCreateOrConnectWithoutPlaygroundInput[]
  createMany?: Prisma.StarMarkCreateManyPlaygroundInputEnvelope
  connect?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
}

export type StarMarkUncheckedCreateNestedManyWithoutPlaygroundInput = {
  create?: Prisma.XOR<Prisma.StarMarkCreateWithoutPlaygroundInput, Prisma.StarMarkUncheckedCreateWithoutPlaygroundInput> | Prisma.StarMarkCreateWithoutPlaygroundInput[] | Prisma.StarMarkUncheckedCreateWithoutPlaygroundInput[]
  connectOrCreate?: Prisma.StarMarkCreateOrConnectWithoutPlaygroundInput | Prisma.StarMarkCreateOrConnectWithoutPlaygroundInput[]
  createMany?: Prisma.StarMarkCreateManyPlaygroundInputEnvelope
  connect?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
}

export type StarMarkUpdateManyWithoutPlaygroundNestedInput = {
  create?: Prisma.XOR<Prisma.StarMarkCreateWithoutPlaygroundInput, Prisma.StarMarkUncheckedCreateWithoutPlaygroundInput> | Prisma.StarMarkCreateWithoutPlaygroundInput[] | Prisma.StarMarkUncheckedCreateWithoutPlaygroundInput[]
  connectOrCreate?: Prisma.StarMarkCreateOrConnectWithoutPlaygroundInput | Prisma.StarMarkCreateOrConnectWithoutPlaygroundInput[]
  upsert?: Prisma.StarMarkUpsertWithWhereUniqueWithoutPlaygroundInput | Prisma.StarMarkUpsertWithWhereUniqueWithoutPlaygroundInput[]
  createMany?: Prisma.StarMarkCreateManyPlaygroundInputEnvelope
  set?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
  disconnect?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
  delete?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
  connect?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
  update?: Prisma.StarMarkUpdateWithWhereUniqueWithoutPlaygroundInput | Prisma.StarMarkUpdateWithWhereUniqueWithoutPlaygroundInput[]
  updateMany?: Prisma.StarMarkUpdateManyWithWhereWithoutPlaygroundInput | Prisma.StarMarkUpdateManyWithWhereWithoutPlaygroundInput[]
  deleteMany?: Prisma.StarMarkScalarWhereInput | Prisma.StarMarkScalarWhereInput[]
}

export type StarMarkUncheckedUpdateManyWithoutPlaygroundNestedInput = {
  create?: Prisma.XOR<Prisma.StarMarkCreateWithoutPlaygroundInput, Prisma.StarMarkUncheckedCreateWithoutPlaygroundInput> | Prisma.StarMarkCreateWithoutPlaygroundInput[] | Prisma.StarMarkUncheckedCreateWithoutPlaygroundInput[]
  connectOrCreate?: Prisma.StarMarkCreateOrConnectWithoutPlaygroundInput | Prisma.StarMarkCreateOrConnectWithoutPlaygroundInput[]
  upsert?: Prisma.StarMarkUpsertWithWhereUniqueWithoutPlaygroundInput | Prisma.StarMarkUpsertWithWhereUniqueWithoutPlaygroundInput[]
  createMany?: Prisma.StarMarkCreateManyPlaygroundInputEnvelope
  set?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
  disconnect?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
  delete?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
  connect?: Prisma.StarMarkWhereUniqueInput | Prisma.StarMarkWhereUniqueInput[]
  update?: Prisma.StarMarkUpdateWithWhereUniqueWithoutPlaygroundInput | Prisma.StarMarkUpdateWithWhereUniqueWithoutPlaygroundInput[]
  updateMany?: Prisma.StarMarkUpdateManyWithWhereWithoutPlaygroundInput | Prisma.StarMarkUpdateManyWithWhereWithoutPlaygroundInput[]
  deleteMany?: Prisma.StarMarkScalarWhereInput | Prisma.StarMarkScalarWhereInput[]
}

export type StarMarkCreateWithoutUserInput = {
  id?: string
  isMarked: string
  createdAt?: Date | string
  playground: Prisma.PlaygroundCreateNestedOneWithoutStarmarkInput
}

export type StarMarkUncheckedCreateWithoutUserInput = {
  id?: string
  playgroundId: string
  isMarked: string
  createdAt?: Date | string
}

export type StarMarkCreateOrConnectWithoutUserInput = {
  where: Prisma.StarMarkWhereUniqueInput
  create: Prisma.XOR<Prisma.StarMarkCreateWithoutUserInput, Prisma.StarMarkUncheckedCreateWithoutUserInput>
}

export type StarMarkCreateManyUserInputEnvelope = {
  data: Prisma.StarMarkCreateManyUserInput | Prisma.StarMarkCreateManyUserInput[]
}

export type StarMarkUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.StarMarkWhereUniqueInput
  update: Prisma.XOR<Prisma.StarMarkUpdateWithoutUserInput, Prisma.StarMarkUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.StarMarkCreateWithoutUserInput, Prisma.StarMarkUncheckedCreateWithoutUserInput>
}

export type StarMarkUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.StarMarkWhereUniqueInput
  data: Prisma.XOR<Prisma.StarMarkUpdateWithoutUserInput, Prisma.StarMarkUncheckedUpdateWithoutUserInput>
}

export type StarMarkUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.StarMarkScalarWhereInput
  data: Prisma.XOR<Prisma.StarMarkUpdateManyMutationInput, Prisma.StarMarkUncheckedUpdateManyWithoutUserInput>
}

export type StarMarkScalarWhereInput = {
  AND?: Prisma.StarMarkScalarWhereInput | Prisma.StarMarkScalarWhereInput[]
  OR?: Prisma.StarMarkScalarWhereInput[]
  NOT?: Prisma.StarMarkScalarWhereInput | Prisma.StarMarkScalarWhereInput[]
  id?: Prisma.StringFilter<"StarMark"> | string
  userId?: Prisma.StringFilter<"StarMark"> | string
  playgroundId?: Prisma.StringFilter<"StarMark"> | string
  isMarked?: Prisma.StringFilter<"StarMark"> | string
  createdAt?: Prisma.DateTimeFilter<"StarMark"> | Date | string
}

export type StarMarkCreateWithoutPlaygroundInput = {
  id?: string
  isMarked: string
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutStaredPlaygroundInput
}

export type StarMarkUncheckedCreateWithoutPlaygroundInput = {
  id?: string
  userId: string
  isMarked: string
  createdAt?: Date | string
}

export type StarMarkCreateOrConnectWithoutPlaygroundInput = {
  where: Prisma.StarMarkWhereUniqueInput
  create: Prisma.XOR<Prisma.StarMarkCreateWithoutPlaygroundInput, Prisma.StarMarkUncheckedCreateWithoutPlaygroundInput>
}

export type StarMarkCreateManyPlaygroundInputEnvelope = {
  data: Prisma.StarMarkCreateManyPlaygroundInput | Prisma.StarMarkCreateManyPlaygroundInput[]
}

export type StarMarkUpsertWithWhereUniqueWithoutPlaygroundInput = {
  where: Prisma.StarMarkWhereUniqueInput
  update: Prisma.XOR<Prisma.StarMarkUpdateWithoutPlaygroundInput, Prisma.StarMarkUncheckedUpdateWithoutPlaygroundInput>
  create: Prisma.XOR<Prisma.StarMarkCreateWithoutPlaygroundInput, Prisma.StarMarkUncheckedCreateWithoutPlaygroundInput>
}

export type StarMarkUpdateWithWhereUniqueWithoutPlaygroundInput = {
  where: Prisma.StarMarkWhereUniqueInput
  data: Prisma.XOR<Prisma.StarMarkUpdateWithoutPlaygroundInput, Prisma.StarMarkUncheckedUpdateWithoutPlaygroundInput>
}

export type StarMarkUpdateManyWithWhereWithoutPlaygroundInput = {
  where: Prisma.StarMarkScalarWhereInput
  data: Prisma.XOR<Prisma.StarMarkUpdateManyMutationInput, Prisma.StarMarkUncheckedUpdateManyWithoutPlaygroundInput>
}

export type StarMarkCreateManyUserInput = {
  id?: string
  playgroundId: string
  isMarked: string
  createdAt?: Date | string
}

export type StarMarkUpdateWithoutUserInput = {
  isMarked?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playground?: Prisma.PlaygroundUpdateOneRequiredWithoutStarmarkNestedInput
}

export type StarMarkUncheckedUpdateWithoutUserInput = {
  playgroundId?: Prisma.StringFieldUpdateOperationsInput | string
  isMarked?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StarMarkUncheckedUpdateManyWithoutUserInput = {
  playgroundId?: Prisma.StringFieldUpdateOperationsInput | string
  isMarked?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StarMarkCreateManyPlaygroundInput = {
  id?: string
  userId: string
  isMarked: string
  createdAt?: Date | string
}

export type StarMarkUpdateWithoutPlaygroundInput = {
  isMarked?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutStaredPlaygroundNestedInput
}

export type StarMarkUncheckedUpdateWithoutPlaygroundInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  isMarked?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StarMarkUncheckedUpdateManyWithoutPlaygroundInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  isMarked?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type StarMarkSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  playgroundId?: boolean
  isMarked?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  playground?: boolean | Prisma.PlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["starMark"]>



export type StarMarkSelectScalar = {
  id?: boolean
  userId?: boolean
  playgroundId?: boolean
  isMarked?: boolean
  createdAt?: boolean
}

export type StarMarkOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "playgroundId" | "isMarked" | "createdAt", ExtArgs["result"]["starMark"]>
export type StarMarkInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  playground?: boolean | Prisma.PlaygroundDefaultArgs<ExtArgs>
}

export type $StarMarkPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "StarMark"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    playground: Prisma.$PlaygroundPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    playgroundId: string
    isMarked: string
    createdAt: Date
  }, ExtArgs["result"]["starMark"]>
  composites: {}
}

export type StarMarkGetPayload<S extends boolean | null | undefined | StarMarkDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StarMarkPayload, S>

export type StarMarkCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StarMarkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StarMarkCountAggregateInputType | true
  }

export interface StarMarkDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StarMark'], meta: { name: 'StarMark' } }
  /**
   * Find zero or one StarMark that matches the filter.
   * @param {StarMarkFindUniqueArgs} args - Arguments to find a StarMark
   * @example
   * // Get one StarMark
   * const starMark = await prisma.starMark.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StarMarkFindUniqueArgs>(args: Prisma.SelectSubset<T, StarMarkFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StarMarkClient<runtime.Types.Result.GetResult<Prisma.$StarMarkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one StarMark that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StarMarkFindUniqueOrThrowArgs} args - Arguments to find a StarMark
   * @example
   * // Get one StarMark
   * const starMark = await prisma.starMark.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StarMarkFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StarMarkFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StarMarkClient<runtime.Types.Result.GetResult<Prisma.$StarMarkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StarMark that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StarMarkFindFirstArgs} args - Arguments to find a StarMark
   * @example
   * // Get one StarMark
   * const starMark = await prisma.starMark.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StarMarkFindFirstArgs>(args?: Prisma.SelectSubset<T, StarMarkFindFirstArgs<ExtArgs>>): Prisma.Prisma__StarMarkClient<runtime.Types.Result.GetResult<Prisma.$StarMarkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StarMark that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StarMarkFindFirstOrThrowArgs} args - Arguments to find a StarMark
   * @example
   * // Get one StarMark
   * const starMark = await prisma.starMark.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StarMarkFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StarMarkFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StarMarkClient<runtime.Types.Result.GetResult<Prisma.$StarMarkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more StarMarks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StarMarkFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StarMarks
   * const starMarks = await prisma.starMark.findMany()
   * 
   * // Get first 10 StarMarks
   * const starMarks = await prisma.starMark.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const starMarkWithIdOnly = await prisma.starMark.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends StarMarkFindManyArgs>(args?: Prisma.SelectSubset<T, StarMarkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StarMarkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a StarMark.
   * @param {StarMarkCreateArgs} args - Arguments to create a StarMark.
   * @example
   * // Create one StarMark
   * const StarMark = await prisma.starMark.create({
   *   data: {
   *     // ... data to create a StarMark
   *   }
   * })
   * 
   */
  create<T extends StarMarkCreateArgs>(args: Prisma.SelectSubset<T, StarMarkCreateArgs<ExtArgs>>): Prisma.Prisma__StarMarkClient<runtime.Types.Result.GetResult<Prisma.$StarMarkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many StarMarks.
   * @param {StarMarkCreateManyArgs} args - Arguments to create many StarMarks.
   * @example
   * // Create many StarMarks
   * const starMark = await prisma.starMark.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StarMarkCreateManyArgs>(args?: Prisma.SelectSubset<T, StarMarkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a StarMark.
   * @param {StarMarkDeleteArgs} args - Arguments to delete one StarMark.
   * @example
   * // Delete one StarMark
   * const StarMark = await prisma.starMark.delete({
   *   where: {
   *     // ... filter to delete one StarMark
   *   }
   * })
   * 
   */
  delete<T extends StarMarkDeleteArgs>(args: Prisma.SelectSubset<T, StarMarkDeleteArgs<ExtArgs>>): Prisma.Prisma__StarMarkClient<runtime.Types.Result.GetResult<Prisma.$StarMarkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one StarMark.
   * @param {StarMarkUpdateArgs} args - Arguments to update one StarMark.
   * @example
   * // Update one StarMark
   * const starMark = await prisma.starMark.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StarMarkUpdateArgs>(args: Prisma.SelectSubset<T, StarMarkUpdateArgs<ExtArgs>>): Prisma.Prisma__StarMarkClient<runtime.Types.Result.GetResult<Prisma.$StarMarkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more StarMarks.
   * @param {StarMarkDeleteManyArgs} args - Arguments to filter StarMarks to delete.
   * @example
   * // Delete a few StarMarks
   * const { count } = await prisma.starMark.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StarMarkDeleteManyArgs>(args?: Prisma.SelectSubset<T, StarMarkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StarMarks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StarMarkUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StarMarks
   * const starMark = await prisma.starMark.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StarMarkUpdateManyArgs>(args: Prisma.SelectSubset<T, StarMarkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one StarMark.
   * @param {StarMarkUpsertArgs} args - Arguments to update or create a StarMark.
   * @example
   * // Update or create a StarMark
   * const starMark = await prisma.starMark.upsert({
   *   create: {
   *     // ... data to create a StarMark
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StarMark we want to update
   *   }
   * })
   */
  upsert<T extends StarMarkUpsertArgs>(args: Prisma.SelectSubset<T, StarMarkUpsertArgs<ExtArgs>>): Prisma.Prisma__StarMarkClient<runtime.Types.Result.GetResult<Prisma.$StarMarkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more StarMarks that matches the filter.
   * @param {StarMarkFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const starMark = await prisma.starMark.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.StarMarkFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a StarMark.
   * @param {StarMarkAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const starMark = await prisma.starMark.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.StarMarkAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of StarMarks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StarMarkCountArgs} args - Arguments to filter StarMarks to count.
   * @example
   * // Count the number of StarMarks
   * const count = await prisma.starMark.count({
   *   where: {
   *     // ... the filter for the StarMarks we want to count
   *   }
   * })
  **/
  count<T extends StarMarkCountArgs>(
    args?: Prisma.Subset<T, StarMarkCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StarMarkCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a StarMark.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StarMarkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StarMarkAggregateArgs>(args: Prisma.Subset<T, StarMarkAggregateArgs>): Prisma.PrismaPromise<GetStarMarkAggregateType<T>>

  /**
   * Group by StarMark.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StarMarkGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StarMarkGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StarMarkGroupByArgs['orderBy'] }
      : { orderBy?: StarMarkGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StarMarkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStarMarkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the StarMark model
 */
readonly fields: StarMarkFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StarMark.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StarMarkClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  playground<T extends Prisma.PlaygroundDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PlaygroundDefaultArgs<ExtArgs>>): Prisma.Prisma__PlaygroundClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the StarMark model
 */
export interface StarMarkFieldRefs {
  readonly id: Prisma.FieldRef<"StarMark", 'String'>
  readonly userId: Prisma.FieldRef<"StarMark", 'String'>
  readonly playgroundId: Prisma.FieldRef<"StarMark", 'String'>
  readonly isMarked: Prisma.FieldRef<"StarMark", 'String'>
  readonly createdAt: Prisma.FieldRef<"StarMark", 'DateTime'>
}
    

// Custom InputTypes
/**
 * StarMark findUnique
 */
export type StarMarkFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StarMark
   */
  select?: Prisma.StarMarkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StarMark
   */
  omit?: Prisma.StarMarkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StarMarkInclude<ExtArgs> | null
  /**
   * Filter, which StarMark to fetch.
   */
  where: Prisma.StarMarkWhereUniqueInput
}

/**
 * StarMark findUniqueOrThrow
 */
export type StarMarkFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StarMark
   */
  select?: Prisma.StarMarkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StarMark
   */
  omit?: Prisma.StarMarkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StarMarkInclude<ExtArgs> | null
  /**
   * Filter, which StarMark to fetch.
   */
  where: Prisma.StarMarkWhereUniqueInput
}

/**
 * StarMark findFirst
 */
export type StarMarkFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StarMark
   */
  select?: Prisma.StarMarkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StarMark
   */
  omit?: Prisma.StarMarkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StarMarkInclude<ExtArgs> | null
  /**
   * Filter, which StarMark to fetch.
   */
  where?: Prisma.StarMarkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StarMarks to fetch.
   */
  orderBy?: Prisma.StarMarkOrderByWithRelationInput | Prisma.StarMarkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StarMarks.
   */
  cursor?: Prisma.StarMarkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StarMarks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StarMarks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StarMarks.
   */
  distinct?: Prisma.StarMarkScalarFieldEnum | Prisma.StarMarkScalarFieldEnum[]
}

/**
 * StarMark findFirstOrThrow
 */
export type StarMarkFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StarMark
   */
  select?: Prisma.StarMarkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StarMark
   */
  omit?: Prisma.StarMarkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StarMarkInclude<ExtArgs> | null
  /**
   * Filter, which StarMark to fetch.
   */
  where?: Prisma.StarMarkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StarMarks to fetch.
   */
  orderBy?: Prisma.StarMarkOrderByWithRelationInput | Prisma.StarMarkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StarMarks.
   */
  cursor?: Prisma.StarMarkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StarMarks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StarMarks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StarMarks.
   */
  distinct?: Prisma.StarMarkScalarFieldEnum | Prisma.StarMarkScalarFieldEnum[]
}

/**
 * StarMark findMany
 */
export type StarMarkFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StarMark
   */
  select?: Prisma.StarMarkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StarMark
   */
  omit?: Prisma.StarMarkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StarMarkInclude<ExtArgs> | null
  /**
   * Filter, which StarMarks to fetch.
   */
  where?: Prisma.StarMarkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StarMarks to fetch.
   */
  orderBy?: Prisma.StarMarkOrderByWithRelationInput | Prisma.StarMarkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing StarMarks.
   */
  cursor?: Prisma.StarMarkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StarMarks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StarMarks.
   */
  skip?: number
  distinct?: Prisma.StarMarkScalarFieldEnum | Prisma.StarMarkScalarFieldEnum[]
}

/**
 * StarMark create
 */
export type StarMarkCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StarMark
   */
  select?: Prisma.StarMarkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StarMark
   */
  omit?: Prisma.StarMarkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StarMarkInclude<ExtArgs> | null
  /**
   * The data needed to create a StarMark.
   */
  data: Prisma.XOR<Prisma.StarMarkCreateInput, Prisma.StarMarkUncheckedCreateInput>
}

/**
 * StarMark createMany
 */
export type StarMarkCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many StarMarks.
   */
  data: Prisma.StarMarkCreateManyInput | Prisma.StarMarkCreateManyInput[]
}

/**
 * StarMark update
 */
export type StarMarkUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StarMark
   */
  select?: Prisma.StarMarkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StarMark
   */
  omit?: Prisma.StarMarkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StarMarkInclude<ExtArgs> | null
  /**
   * The data needed to update a StarMark.
   */
  data: Prisma.XOR<Prisma.StarMarkUpdateInput, Prisma.StarMarkUncheckedUpdateInput>
  /**
   * Choose, which StarMark to update.
   */
  where: Prisma.StarMarkWhereUniqueInput
}

/**
 * StarMark updateMany
 */
export type StarMarkUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update StarMarks.
   */
  data: Prisma.XOR<Prisma.StarMarkUpdateManyMutationInput, Prisma.StarMarkUncheckedUpdateManyInput>
  /**
   * Filter which StarMarks to update
   */
  where?: Prisma.StarMarkWhereInput
  /**
   * Limit how many StarMarks to update.
   */
  limit?: number
}

/**
 * StarMark upsert
 */
export type StarMarkUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StarMark
   */
  select?: Prisma.StarMarkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StarMark
   */
  omit?: Prisma.StarMarkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StarMarkInclude<ExtArgs> | null
  /**
   * The filter to search for the StarMark to update in case it exists.
   */
  where: Prisma.StarMarkWhereUniqueInput
  /**
   * In case the StarMark found by the `where` argument doesn't exist, create a new StarMark with this data.
   */
  create: Prisma.XOR<Prisma.StarMarkCreateInput, Prisma.StarMarkUncheckedCreateInput>
  /**
   * In case the StarMark was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StarMarkUpdateInput, Prisma.StarMarkUncheckedUpdateInput>
}

/**
 * StarMark delete
 */
export type StarMarkDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StarMark
   */
  select?: Prisma.StarMarkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StarMark
   */
  omit?: Prisma.StarMarkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StarMarkInclude<ExtArgs> | null
  /**
   * Filter which StarMark to delete.
   */
  where: Prisma.StarMarkWhereUniqueInput
}

/**
 * StarMark deleteMany
 */
export type StarMarkDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StarMarks to delete
   */
  where?: Prisma.StarMarkWhereInput
  /**
   * Limit how many StarMarks to delete.
   */
  limit?: number
}

/**
 * StarMark findRaw
 */
export type StarMarkFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * StarMark aggregateRaw
 */
export type StarMarkAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * StarMark without action
 */
export type StarMarkDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StarMark
   */
  select?: Prisma.StarMarkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StarMark
   */
  omit?: Prisma.StarMarkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StarMarkInclude<ExtArgs> | null
}
