
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `TemplateFile` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TemplateFile
 * 
 */
export type TemplateFileModel = runtime.Types.Result.DefaultSelection<Prisma.$TemplateFilePayload>

export type AggregateTemplateFile = {
  _count: TemplateFileCountAggregateOutputType | null
  _min: TemplateFileMinAggregateOutputType | null
  _max: TemplateFileMaxAggregateOutputType | null
}

export type TemplateFileMinAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
  playgroundId: string | null
}

export type TemplateFileMaxAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
  playgroundId: string | null
}

export type TemplateFileCountAggregateOutputType = {
  id: number
  content: number
  createdAt: number
  updatedAt: number
  playgroundId: number
  _all: number
}


export type TemplateFileMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  playgroundId?: true
}

export type TemplateFileMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  playgroundId?: true
}

export type TemplateFileCountAggregateInputType = {
  id?: true
  content?: true
  createdAt?: true
  updatedAt?: true
  playgroundId?: true
  _all?: true
}

export type TemplateFileAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TemplateFile to aggregate.
   */
  where?: Prisma.TemplateFileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TemplateFiles to fetch.
   */
  orderBy?: Prisma.TemplateFileOrderByWithRelationInput | Prisma.TemplateFileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TemplateFileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TemplateFiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TemplateFiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TemplateFiles
  **/
  _count?: true | TemplateFileCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TemplateFileMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TemplateFileMaxAggregateInputType
}

export type GetTemplateFileAggregateType<T extends TemplateFileAggregateArgs> = {
      [P in keyof T & keyof AggregateTemplateFile]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTemplateFile[P]>
    : Prisma.GetScalarType<T[P], AggregateTemplateFile[P]>
}




export type TemplateFileGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TemplateFileWhereInput
  orderBy?: Prisma.TemplateFileOrderByWithAggregationInput | Prisma.TemplateFileOrderByWithAggregationInput[]
  by: Prisma.TemplateFileScalarFieldEnum[] | Prisma.TemplateFileScalarFieldEnum
  having?: Prisma.TemplateFileScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TemplateFileCountAggregateInputType | true
  _min?: TemplateFileMinAggregateInputType
  _max?: TemplateFileMaxAggregateInputType
}

export type TemplateFileGroupByOutputType = {
  id: string
  content: runtime.JsonValue
  createdAt: Date
  updatedAt: Date
  playgroundId: string
  _count: TemplateFileCountAggregateOutputType | null
  _min: TemplateFileMinAggregateOutputType | null
  _max: TemplateFileMaxAggregateOutputType | null
}

type GetTemplateFileGroupByPayload<T extends TemplateFileGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TemplateFileGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TemplateFileGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TemplateFileGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TemplateFileGroupByOutputType[P]>
      }
    >
  >



export type TemplateFileWhereInput = {
  AND?: Prisma.TemplateFileWhereInput | Prisma.TemplateFileWhereInput[]
  OR?: Prisma.TemplateFileWhereInput[]
  NOT?: Prisma.TemplateFileWhereInput | Prisma.TemplateFileWhereInput[]
  id?: Prisma.StringFilter<"TemplateFile"> | string
  content?: Prisma.JsonFilter<"TemplateFile">
  createdAt?: Prisma.DateTimeFilter<"TemplateFile"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TemplateFile"> | Date | string
  playgroundId?: Prisma.StringFilter<"TemplateFile"> | string
  playground?: Prisma.XOR<Prisma.PlaygroundScalarRelationFilter, Prisma.PlaygroundWhereInput>
}

export type TemplateFileOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  playgroundId?: Prisma.SortOrder
  playground?: Prisma.PlaygroundOrderByWithRelationInput
}

export type TemplateFileWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  playgroundId?: string
  AND?: Prisma.TemplateFileWhereInput | Prisma.TemplateFileWhereInput[]
  OR?: Prisma.TemplateFileWhereInput[]
  NOT?: Prisma.TemplateFileWhereInput | Prisma.TemplateFileWhereInput[]
  content?: Prisma.JsonFilter<"TemplateFile">
  createdAt?: Prisma.DateTimeFilter<"TemplateFile"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TemplateFile"> | Date | string
  playground?: Prisma.XOR<Prisma.PlaygroundScalarRelationFilter, Prisma.PlaygroundWhereInput>
}, "id" | "playgroundId">

export type TemplateFileOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  playgroundId?: Prisma.SortOrder
  _count?: Prisma.TemplateFileCountOrderByAggregateInput
  _max?: Prisma.TemplateFileMaxOrderByAggregateInput
  _min?: Prisma.TemplateFileMinOrderByAggregateInput
}

export type TemplateFileScalarWhereWithAggregatesInput = {
  AND?: Prisma.TemplateFileScalarWhereWithAggregatesInput | Prisma.TemplateFileScalarWhereWithAggregatesInput[]
  OR?: Prisma.TemplateFileScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TemplateFileScalarWhereWithAggregatesInput | Prisma.TemplateFileScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TemplateFile"> | string
  content?: Prisma.JsonWithAggregatesFilter<"TemplateFile">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TemplateFile"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TemplateFile"> | Date | string
  playgroundId?: Prisma.StringWithAggregatesFilter<"TemplateFile"> | string
}

export type TemplateFileCreateInput = {
  id?: string
  content: runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  playground: Prisma.PlaygroundCreateNestedOneWithoutTemplateFilesInput
}

export type TemplateFileUncheckedCreateInput = {
  id?: string
  content: runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  playgroundId: string
}

export type TemplateFileUpdateInput = {
  content?: runtime.InputJsonValue | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playground?: Prisma.PlaygroundUpdateOneRequiredWithoutTemplateFilesNestedInput
}

export type TemplateFileUncheckedUpdateInput = {
  content?: runtime.InputJsonValue | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playgroundId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TemplateFileCreateManyInput = {
  id?: string
  content: runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  playgroundId: string
}

export type TemplateFileUpdateManyMutationInput = {
  content?: runtime.InputJsonValue | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TemplateFileUncheckedUpdateManyInput = {
  content?: runtime.InputJsonValue | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playgroundId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TemplateFileListRelationFilter = {
  every?: Prisma.TemplateFileWhereInput
  some?: Prisma.TemplateFileWhereInput
  none?: Prisma.TemplateFileWhereInput
}

export type TemplateFileOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TemplateFileCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  playgroundId?: Prisma.SortOrder
}

export type TemplateFileMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  playgroundId?: Prisma.SortOrder
}

export type TemplateFileMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  playgroundId?: Prisma.SortOrder
}

export type TemplateFileCreateNestedManyWithoutPlaygroundInput = {
  create?: Prisma.XOR<Prisma.TemplateFileCreateWithoutPlaygroundInput, Prisma.TemplateFileUncheckedCreateWithoutPlaygroundInput> | Prisma.TemplateFileCreateWithoutPlaygroundInput[] | Prisma.TemplateFileUncheckedCreateWithoutPlaygroundInput[]
  connectOrCreate?: Prisma.TemplateFileCreateOrConnectWithoutPlaygroundInput | Prisma.TemplateFileCreateOrConnectWithoutPlaygroundInput[]
  createMany?: Prisma.TemplateFileCreateManyPlaygroundInputEnvelope
  connect?: Prisma.TemplateFileWhereUniqueInput | Prisma.TemplateFileWhereUniqueInput[]
}

export type TemplateFileUncheckedCreateNestedManyWithoutPlaygroundInput = {
  create?: Prisma.XOR<Prisma.TemplateFileCreateWithoutPlaygroundInput, Prisma.TemplateFileUncheckedCreateWithoutPlaygroundInput> | Prisma.TemplateFileCreateWithoutPlaygroundInput[] | Prisma.TemplateFileUncheckedCreateWithoutPlaygroundInput[]
  connectOrCreate?: Prisma.TemplateFileCreateOrConnectWithoutPlaygroundInput | Prisma.TemplateFileCreateOrConnectWithoutPlaygroundInput[]
  createMany?: Prisma.TemplateFileCreateManyPlaygroundInputEnvelope
  connect?: Prisma.TemplateFileWhereUniqueInput | Prisma.TemplateFileWhereUniqueInput[]
}

export type TemplateFileUpdateManyWithoutPlaygroundNestedInput = {
  create?: Prisma.XOR<Prisma.TemplateFileCreateWithoutPlaygroundInput, Prisma.TemplateFileUncheckedCreateWithoutPlaygroundInput> | Prisma.TemplateFileCreateWithoutPlaygroundInput[] | Prisma.TemplateFileUncheckedCreateWithoutPlaygroundInput[]
  connectOrCreate?: Prisma.TemplateFileCreateOrConnectWithoutPlaygroundInput | Prisma.TemplateFileCreateOrConnectWithoutPlaygroundInput[]
  upsert?: Prisma.TemplateFileUpsertWithWhereUniqueWithoutPlaygroundInput | Prisma.TemplateFileUpsertWithWhereUniqueWithoutPlaygroundInput[]
  createMany?: Prisma.TemplateFileCreateManyPlaygroundInputEnvelope
  set?: Prisma.TemplateFileWhereUniqueInput | Prisma.TemplateFileWhereUniqueInput[]
  disconnect?: Prisma.TemplateFileWhereUniqueInput | Prisma.TemplateFileWhereUniqueInput[]
  delete?: Prisma.TemplateFileWhereUniqueInput | Prisma.TemplateFileWhereUniqueInput[]
  connect?: Prisma.TemplateFileWhereUniqueInput | Prisma.TemplateFileWhereUniqueInput[]
  update?: Prisma.TemplateFileUpdateWithWhereUniqueWithoutPlaygroundInput | Prisma.TemplateFileUpdateWithWhereUniqueWithoutPlaygroundInput[]
  updateMany?: Prisma.TemplateFileUpdateManyWithWhereWithoutPlaygroundInput | Prisma.TemplateFileUpdateManyWithWhereWithoutPlaygroundInput[]
  deleteMany?: Prisma.TemplateFileScalarWhereInput | Prisma.TemplateFileScalarWhereInput[]
}

export type TemplateFileUncheckedUpdateManyWithoutPlaygroundNestedInput = {
  create?: Prisma.XOR<Prisma.TemplateFileCreateWithoutPlaygroundInput, Prisma.TemplateFileUncheckedCreateWithoutPlaygroundInput> | Prisma.TemplateFileCreateWithoutPlaygroundInput[] | Prisma.TemplateFileUncheckedCreateWithoutPlaygroundInput[]
  connectOrCreate?: Prisma.TemplateFileCreateOrConnectWithoutPlaygroundInput | Prisma.TemplateFileCreateOrConnectWithoutPlaygroundInput[]
  upsert?: Prisma.TemplateFileUpsertWithWhereUniqueWithoutPlaygroundInput | Prisma.TemplateFileUpsertWithWhereUniqueWithoutPlaygroundInput[]
  createMany?: Prisma.TemplateFileCreateManyPlaygroundInputEnvelope
  set?: Prisma.TemplateFileWhereUniqueInput | Prisma.TemplateFileWhereUniqueInput[]
  disconnect?: Prisma.TemplateFileWhereUniqueInput | Prisma.TemplateFileWhereUniqueInput[]
  delete?: Prisma.TemplateFileWhereUniqueInput | Prisma.TemplateFileWhereUniqueInput[]
  connect?: Prisma.TemplateFileWhereUniqueInput | Prisma.TemplateFileWhereUniqueInput[]
  update?: Prisma.TemplateFileUpdateWithWhereUniqueWithoutPlaygroundInput | Prisma.TemplateFileUpdateWithWhereUniqueWithoutPlaygroundInput[]
  updateMany?: Prisma.TemplateFileUpdateManyWithWhereWithoutPlaygroundInput | Prisma.TemplateFileUpdateManyWithWhereWithoutPlaygroundInput[]
  deleteMany?: Prisma.TemplateFileScalarWhereInput | Prisma.TemplateFileScalarWhereInput[]
}

export type TemplateFileCreateWithoutPlaygroundInput = {
  id?: string
  content: runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TemplateFileUncheckedCreateWithoutPlaygroundInput = {
  id?: string
  content: runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TemplateFileCreateOrConnectWithoutPlaygroundInput = {
  where: Prisma.TemplateFileWhereUniqueInput
  create: Prisma.XOR<Prisma.TemplateFileCreateWithoutPlaygroundInput, Prisma.TemplateFileUncheckedCreateWithoutPlaygroundInput>
}

export type TemplateFileCreateManyPlaygroundInputEnvelope = {
  data: Prisma.TemplateFileCreateManyPlaygroundInput | Prisma.TemplateFileCreateManyPlaygroundInput[]
}

export type TemplateFileUpsertWithWhereUniqueWithoutPlaygroundInput = {
  where: Prisma.TemplateFileWhereUniqueInput
  update: Prisma.XOR<Prisma.TemplateFileUpdateWithoutPlaygroundInput, Prisma.TemplateFileUncheckedUpdateWithoutPlaygroundInput>
  create: Prisma.XOR<Prisma.TemplateFileCreateWithoutPlaygroundInput, Prisma.TemplateFileUncheckedCreateWithoutPlaygroundInput>
}

export type TemplateFileUpdateWithWhereUniqueWithoutPlaygroundInput = {
  where: Prisma.TemplateFileWhereUniqueInput
  data: Prisma.XOR<Prisma.TemplateFileUpdateWithoutPlaygroundInput, Prisma.TemplateFileUncheckedUpdateWithoutPlaygroundInput>
}

export type TemplateFileUpdateManyWithWhereWithoutPlaygroundInput = {
  where: Prisma.TemplateFileScalarWhereInput
  data: Prisma.XOR<Prisma.TemplateFileUpdateManyMutationInput, Prisma.TemplateFileUncheckedUpdateManyWithoutPlaygroundInput>
}

export type TemplateFileScalarWhereInput = {
  AND?: Prisma.TemplateFileScalarWhereInput | Prisma.TemplateFileScalarWhereInput[]
  OR?: Prisma.TemplateFileScalarWhereInput[]
  NOT?: Prisma.TemplateFileScalarWhereInput | Prisma.TemplateFileScalarWhereInput[]
  id?: Prisma.StringFilter<"TemplateFile"> | string
  content?: Prisma.JsonFilter<"TemplateFile">
  createdAt?: Prisma.DateTimeFilter<"TemplateFile"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TemplateFile"> | Date | string
  playgroundId?: Prisma.StringFilter<"TemplateFile"> | string
}

export type TemplateFileCreateManyPlaygroundInput = {
  id?: string
  content: runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TemplateFileUpdateWithoutPlaygroundInput = {
  content?: runtime.InputJsonValue | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TemplateFileUncheckedUpdateWithoutPlaygroundInput = {
  content?: runtime.InputJsonValue | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TemplateFileUncheckedUpdateManyWithoutPlaygroundInput = {
  content?: runtime.InputJsonValue | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TemplateFileSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  playgroundId?: boolean
  playground?: boolean | Prisma.PlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["templateFile"]>



export type TemplateFileSelectScalar = {
  id?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  playgroundId?: boolean
}

export type TemplateFileOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "content" | "createdAt" | "updatedAt" | "playgroundId", ExtArgs["result"]["templateFile"]>
export type TemplateFileInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  playground?: boolean | Prisma.PlaygroundDefaultArgs<ExtArgs>
}

export type $TemplateFilePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TemplateFile"
  objects: {
    playground: Prisma.$PlaygroundPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    content: runtime.JsonValue
    createdAt: Date
    updatedAt: Date
    playgroundId: string
  }, ExtArgs["result"]["templateFile"]>
  composites: {}
}

export type TemplateFileGetPayload<S extends boolean | null | undefined | TemplateFileDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TemplateFilePayload, S>

export type TemplateFileCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TemplateFileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TemplateFileCountAggregateInputType | true
  }

export interface TemplateFileDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TemplateFile'], meta: { name: 'TemplateFile' } }
  /**
   * Find zero or one TemplateFile that matches the filter.
   * @param {TemplateFileFindUniqueArgs} args - Arguments to find a TemplateFile
   * @example
   * // Get one TemplateFile
   * const templateFile = await prisma.templateFile.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TemplateFileFindUniqueArgs>(args: Prisma.SelectSubset<T, TemplateFileFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TemplateFileClient<runtime.Types.Result.GetResult<Prisma.$TemplateFilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TemplateFile that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TemplateFileFindUniqueOrThrowArgs} args - Arguments to find a TemplateFile
   * @example
   * // Get one TemplateFile
   * const templateFile = await prisma.templateFile.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TemplateFileFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TemplateFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TemplateFileClient<runtime.Types.Result.GetResult<Prisma.$TemplateFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TemplateFile that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TemplateFileFindFirstArgs} args - Arguments to find a TemplateFile
   * @example
   * // Get one TemplateFile
   * const templateFile = await prisma.templateFile.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TemplateFileFindFirstArgs>(args?: Prisma.SelectSubset<T, TemplateFileFindFirstArgs<ExtArgs>>): Prisma.Prisma__TemplateFileClient<runtime.Types.Result.GetResult<Prisma.$TemplateFilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TemplateFile that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TemplateFileFindFirstOrThrowArgs} args - Arguments to find a TemplateFile
   * @example
   * // Get one TemplateFile
   * const templateFile = await prisma.templateFile.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TemplateFileFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TemplateFileFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TemplateFileClient<runtime.Types.Result.GetResult<Prisma.$TemplateFilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TemplateFiles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TemplateFileFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TemplateFiles
   * const templateFiles = await prisma.templateFile.findMany()
   * 
   * // Get first 10 TemplateFiles
   * const templateFiles = await prisma.templateFile.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const templateFileWithIdOnly = await prisma.templateFile.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TemplateFileFindManyArgs>(args?: Prisma.SelectSubset<T, TemplateFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TemplateFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TemplateFile.
   * @param {TemplateFileCreateArgs} args - Arguments to create a TemplateFile.
   * @example
   * // Create one TemplateFile
   * const TemplateFile = await prisma.templateFile.create({
   *   data: {
   *     // ... data to create a TemplateFile
   *   }
   * })
   * 
   */
  create<T extends TemplateFileCreateArgs>(args: Prisma.SelectSubset<T, TemplateFileCreateArgs<ExtArgs>>): Prisma.Prisma__TemplateFileClient<runtime.Types.Result.GetResult<Prisma.$TemplateFilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TemplateFiles.
   * @param {TemplateFileCreateManyArgs} args - Arguments to create many TemplateFiles.
   * @example
   * // Create many TemplateFiles
   * const templateFile = await prisma.templateFile.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TemplateFileCreateManyArgs>(args?: Prisma.SelectSubset<T, TemplateFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a TemplateFile.
   * @param {TemplateFileDeleteArgs} args - Arguments to delete one TemplateFile.
   * @example
   * // Delete one TemplateFile
   * const TemplateFile = await prisma.templateFile.delete({
   *   where: {
   *     // ... filter to delete one TemplateFile
   *   }
   * })
   * 
   */
  delete<T extends TemplateFileDeleteArgs>(args: Prisma.SelectSubset<T, TemplateFileDeleteArgs<ExtArgs>>): Prisma.Prisma__TemplateFileClient<runtime.Types.Result.GetResult<Prisma.$TemplateFilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TemplateFile.
   * @param {TemplateFileUpdateArgs} args - Arguments to update one TemplateFile.
   * @example
   * // Update one TemplateFile
   * const templateFile = await prisma.templateFile.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TemplateFileUpdateArgs>(args: Prisma.SelectSubset<T, TemplateFileUpdateArgs<ExtArgs>>): Prisma.Prisma__TemplateFileClient<runtime.Types.Result.GetResult<Prisma.$TemplateFilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TemplateFiles.
   * @param {TemplateFileDeleteManyArgs} args - Arguments to filter TemplateFiles to delete.
   * @example
   * // Delete a few TemplateFiles
   * const { count } = await prisma.templateFile.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TemplateFileDeleteManyArgs>(args?: Prisma.SelectSubset<T, TemplateFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TemplateFiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TemplateFileUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TemplateFiles
   * const templateFile = await prisma.templateFile.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TemplateFileUpdateManyArgs>(args: Prisma.SelectSubset<T, TemplateFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one TemplateFile.
   * @param {TemplateFileUpsertArgs} args - Arguments to update or create a TemplateFile.
   * @example
   * // Update or create a TemplateFile
   * const templateFile = await prisma.templateFile.upsert({
   *   create: {
   *     // ... data to create a TemplateFile
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TemplateFile we want to update
   *   }
   * })
   */
  upsert<T extends TemplateFileUpsertArgs>(args: Prisma.SelectSubset<T, TemplateFileUpsertArgs<ExtArgs>>): Prisma.Prisma__TemplateFileClient<runtime.Types.Result.GetResult<Prisma.$TemplateFilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TemplateFiles that matches the filter.
   * @param {TemplateFileFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const templateFile = await prisma.templateFile.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.TemplateFileFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a TemplateFile.
   * @param {TemplateFileAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const templateFile = await prisma.templateFile.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.TemplateFileAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of TemplateFiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TemplateFileCountArgs} args - Arguments to filter TemplateFiles to count.
   * @example
   * // Count the number of TemplateFiles
   * const count = await prisma.templateFile.count({
   *   where: {
   *     // ... the filter for the TemplateFiles we want to count
   *   }
   * })
  **/
  count<T extends TemplateFileCountArgs>(
    args?: Prisma.Subset<T, TemplateFileCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TemplateFileCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TemplateFile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TemplateFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TemplateFileAggregateArgs>(args: Prisma.Subset<T, TemplateFileAggregateArgs>): Prisma.PrismaPromise<GetTemplateFileAggregateType<T>>

  /**
   * Group by TemplateFile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TemplateFileGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TemplateFileGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TemplateFileGroupByArgs['orderBy'] }
      : { orderBy?: TemplateFileGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TemplateFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTemplateFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TemplateFile model
 */
readonly fields: TemplateFileFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TemplateFile.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TemplateFileClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  playground<T extends Prisma.PlaygroundDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PlaygroundDefaultArgs<ExtArgs>>): Prisma.Prisma__PlaygroundClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TemplateFile model
 */
export interface TemplateFileFieldRefs {
  readonly id: Prisma.FieldRef<"TemplateFile", 'String'>
  readonly content: Prisma.FieldRef<"TemplateFile", 'Json'>
  readonly createdAt: Prisma.FieldRef<"TemplateFile", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TemplateFile", 'DateTime'>
  readonly playgroundId: Prisma.FieldRef<"TemplateFile", 'String'>
}
    

// Custom InputTypes
/**
 * TemplateFile findUnique
 */
export type TemplateFileFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TemplateFile
   */
  select?: Prisma.TemplateFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TemplateFile
   */
  omit?: Prisma.TemplateFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemplateFileInclude<ExtArgs> | null
  /**
   * Filter, which TemplateFile to fetch.
   */
  where: Prisma.TemplateFileWhereUniqueInput
}

/**
 * TemplateFile findUniqueOrThrow
 */
export type TemplateFileFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TemplateFile
   */
  select?: Prisma.TemplateFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TemplateFile
   */
  omit?: Prisma.TemplateFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemplateFileInclude<ExtArgs> | null
  /**
   * Filter, which TemplateFile to fetch.
   */
  where: Prisma.TemplateFileWhereUniqueInput
}

/**
 * TemplateFile findFirst
 */
export type TemplateFileFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TemplateFile
   */
  select?: Prisma.TemplateFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TemplateFile
   */
  omit?: Prisma.TemplateFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemplateFileInclude<ExtArgs> | null
  /**
   * Filter, which TemplateFile to fetch.
   */
  where?: Prisma.TemplateFileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TemplateFiles to fetch.
   */
  orderBy?: Prisma.TemplateFileOrderByWithRelationInput | Prisma.TemplateFileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TemplateFiles.
   */
  cursor?: Prisma.TemplateFileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TemplateFiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TemplateFiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TemplateFiles.
   */
  distinct?: Prisma.TemplateFileScalarFieldEnum | Prisma.TemplateFileScalarFieldEnum[]
}

/**
 * TemplateFile findFirstOrThrow
 */
export type TemplateFileFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TemplateFile
   */
  select?: Prisma.TemplateFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TemplateFile
   */
  omit?: Prisma.TemplateFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemplateFileInclude<ExtArgs> | null
  /**
   * Filter, which TemplateFile to fetch.
   */
  where?: Prisma.TemplateFileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TemplateFiles to fetch.
   */
  orderBy?: Prisma.TemplateFileOrderByWithRelationInput | Prisma.TemplateFileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TemplateFiles.
   */
  cursor?: Prisma.TemplateFileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TemplateFiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TemplateFiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TemplateFiles.
   */
  distinct?: Prisma.TemplateFileScalarFieldEnum | Prisma.TemplateFileScalarFieldEnum[]
}

/**
 * TemplateFile findMany
 */
export type TemplateFileFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TemplateFile
   */
  select?: Prisma.TemplateFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TemplateFile
   */
  omit?: Prisma.TemplateFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemplateFileInclude<ExtArgs> | null
  /**
   * Filter, which TemplateFiles to fetch.
   */
  where?: Prisma.TemplateFileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TemplateFiles to fetch.
   */
  orderBy?: Prisma.TemplateFileOrderByWithRelationInput | Prisma.TemplateFileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TemplateFiles.
   */
  cursor?: Prisma.TemplateFileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TemplateFiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TemplateFiles.
   */
  skip?: number
  distinct?: Prisma.TemplateFileScalarFieldEnum | Prisma.TemplateFileScalarFieldEnum[]
}

/**
 * TemplateFile create
 */
export type TemplateFileCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TemplateFile
   */
  select?: Prisma.TemplateFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TemplateFile
   */
  omit?: Prisma.TemplateFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemplateFileInclude<ExtArgs> | null
  /**
   * The data needed to create a TemplateFile.
   */
  data: Prisma.XOR<Prisma.TemplateFileCreateInput, Prisma.TemplateFileUncheckedCreateInput>
}

/**
 * TemplateFile createMany
 */
export type TemplateFileCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TemplateFiles.
   */
  data: Prisma.TemplateFileCreateManyInput | Prisma.TemplateFileCreateManyInput[]
}

/**
 * TemplateFile update
 */
export type TemplateFileUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TemplateFile
   */
  select?: Prisma.TemplateFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TemplateFile
   */
  omit?: Prisma.TemplateFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemplateFileInclude<ExtArgs> | null
  /**
   * The data needed to update a TemplateFile.
   */
  data: Prisma.XOR<Prisma.TemplateFileUpdateInput, Prisma.TemplateFileUncheckedUpdateInput>
  /**
   * Choose, which TemplateFile to update.
   */
  where: Prisma.TemplateFileWhereUniqueInput
}

/**
 * TemplateFile updateMany
 */
export type TemplateFileUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TemplateFiles.
   */
  data: Prisma.XOR<Prisma.TemplateFileUpdateManyMutationInput, Prisma.TemplateFileUncheckedUpdateManyInput>
  /**
   * Filter which TemplateFiles to update
   */
  where?: Prisma.TemplateFileWhereInput
  /**
   * Limit how many TemplateFiles to update.
   */
  limit?: number
}

/**
 * TemplateFile upsert
 */
export type TemplateFileUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TemplateFile
   */
  select?: Prisma.TemplateFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TemplateFile
   */
  omit?: Prisma.TemplateFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemplateFileInclude<ExtArgs> | null
  /**
   * The filter to search for the TemplateFile to update in case it exists.
   */
  where: Prisma.TemplateFileWhereUniqueInput
  /**
   * In case the TemplateFile found by the `where` argument doesn't exist, create a new TemplateFile with this data.
   */
  create: Prisma.XOR<Prisma.TemplateFileCreateInput, Prisma.TemplateFileUncheckedCreateInput>
  /**
   * In case the TemplateFile was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TemplateFileUpdateInput, Prisma.TemplateFileUncheckedUpdateInput>
}

/**
 * TemplateFile delete
 */
export type TemplateFileDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TemplateFile
   */
  select?: Prisma.TemplateFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TemplateFile
   */
  omit?: Prisma.TemplateFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemplateFileInclude<ExtArgs> | null
  /**
   * Filter which TemplateFile to delete.
   */
  where: Prisma.TemplateFileWhereUniqueInput
}

/**
 * TemplateFile deleteMany
 */
export type TemplateFileDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TemplateFiles to delete
   */
  where?: Prisma.TemplateFileWhereInput
  /**
   * Limit how many TemplateFiles to delete.
   */
  limit?: number
}

/**
 * TemplateFile findRaw
 */
export type TemplateFileFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * TemplateFile aggregateRaw
 */
export type TemplateFileAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * TemplateFile without action
 */
export type TemplateFileDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TemplateFile
   */
  select?: Prisma.TemplateFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TemplateFile
   */
  omit?: Prisma.TemplateFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemplateFileInclude<ExtArgs> | null
}
